digraph "SharedTypes::v1_21_80::CameraPreset" {
rankdir = LR
8
8 -> 9
9 -> 10
8 -> 11
11 -> 12
8 -> 13
13 -> 17
8 -> 18
18 -> 19
8 -> 20
20 -> 21
8 -> 22
22 -> 23
8 -> 24
24 -> 25
8 -> 26
26 -> 27
8 -> 28
28 -> 32
8 -> 33
33 -> 37
8 -> 38
38 -> 39
8 -> 40
40 -> 41
8 -> 42
42 -> 43
8 -> 44
44 -> 45
8 -> 46
46 -> 50
8 -> 51
51 -> 52
8 -> 53
53 -> 54
8 -> 55
55 -> 56
8 -> 57
57 -> 66
8 -> 67
67 -> 68
8 -> 69
69 -> 70
8 -> 71
71 -> 94
8 -> 95
95 -> 99

8 [label="SharedTypes::v1_21_80::CameraPreset",comment="name: \"SharedTypes::v1_21_80::CameraPreset\", typeName: \"\", id: 8, branchId: 0, recurseId: -1, attributes: 0, notes: \"\""];
9 [label="Name",comment="name: \"Name\", typeName: \"\", id: 9, branchId: 0, recurseId: -1, attributes: 0, notes: \"\""];
10 [label="string",comment="name: \"string\", typeName: \"\", id: 10, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
11 [label="Inherit From",comment="name: \"Inherit From\", typeName: \"\", id: 11, branchId: 0, recurseId: -1, attributes: 0, notes: \"\""];
12 [label="string",comment="name: \"string\", typeName: \"\", id: 12, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
13 [label="Pos X",comment="name: \"Pos X\", typeName: \"std::optional<float>\", id: 13, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
17 [label="std::optional<float>",comment="name: \"std::optional<float>\", typeName: \"\", id: 17, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
18 [label="Pos Y",comment="name: \"Pos Y\", typeName: \"std::optional<float>\", id: 18, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
19 [label="std::optional<float>",comment="name: \"std::optional<float>\", typeName: \"\", id: 19, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
20 [label="Pos Z",comment="name: \"Pos Z\", typeName: \"std::optional<float>\", id: 20, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
21 [label="std::optional<float>",comment="name: \"std::optional<float>\", typeName: \"\", id: 21, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
22 [label="Rot X",comment="name: \"Rot X\", typeName: \"std::optional<float>\", id: 22, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
23 [label="std::optional<float>",comment="name: \"std::optional<float>\", typeName: \"\", id: 23, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
24 [label="Rot Y",comment="name: \"Rot Y\", typeName: \"std::optional<float>\", id: 24, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
25 [label="std::optional<float>",comment="name: \"std::optional<float>\", typeName: \"\", id: 25, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
26 [label="Rotation Speed",comment="name: \"Rotation Speed\", typeName: \"std::optional<float>\", id: 26, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
27 [label="std::optional<float>",comment="name: \"std::optional<float>\", typeName: \"\", id: 27, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
28 [label="Snap to Target",comment="name: \"Snap to Target\", typeName: \"std::optional<bool>\", id: 28, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
32 [label="std::optional<bool>",comment="name: \"std::optional<bool>\", typeName: \"\", id: 32, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
33 [label="Horizontal Rotation Limit",comment="name: \"Horizontal Rotation Limit\", typeName: \"std::optional<class Vec2>\", id: 33, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
37 [label="std::optional<class Vec2>",comment="name: \"std::optional<class Vec2>\", typeName: \"\", id: 37, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
38 [label="Vertical Rotation Limit",comment="name: \"Vertical Rotation Limit\", typeName: \"std::optional<class Vec2>\", id: 38, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
39 [label="std::optional<class Vec2>",comment="name: \"std::optional<class Vec2>\", typeName: \"\", id: 39, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
40 [label="Continue Targeting",comment="name: \"Continue Targeting\", typeName: \"std::optional<bool>\", id: 40, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
41 [label="std::optional<bool>",comment="name: \"std::optional<bool>\", typeName: \"\", id: 41, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
42 [label="Block Listening Radius",comment="name: \"Block Listening Radius\", typeName: \"std::optional<float>\", id: 42, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
43 [label="std::optional<float>",comment="name: \"std::optional<float>\", typeName: \"\", id: 43, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
44 [label="View Offset",comment="name: \"View Offset\", typeName: \"std::optional<class Vec2>\", id: 44, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
45 [label="std::optional<class Vec2>",comment="name: \"std::optional<class Vec2>\", typeName: \"\", id: 45, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
46 [label="Entity Offset",comment="name: \"Entity Offset\", typeName: \"std::optional<class Vec3>\", id: 46, branchId: 0, recurseId: -1, attributes: 256, notes: \"Changing the camera's pivot point from the center of the entity\""];
50 [label="std::optional<class Vec3>",comment="name: \"std::optional<class Vec3>\", typeName: \"\", id: 50, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
51 [label="Radius",comment="name: \"Radius\", typeName: \"std::optional<float>\", id: 51, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
52 [label="std::optional<float>",comment="name: \"std::optional<float>\", typeName: \"\", id: 52, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
53 [label="Yaw Limit Min",comment="name: \"Yaw Limit Min\", typeName: \"std::optional<float>\", id: 53, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
54 [label="std::optional<float>",comment="name: \"std::optional<float>\", typeName: \"\", id: 54, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
55 [label="Yaw Limit Max",comment="name: \"Yaw Limit Max\", typeName: \"std::optional<float>\", id: 55, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
56 [label="std::optional<float>",comment="name: \"std::optional<float>\", typeName: \"\", id: 56, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
57 [label="Listener",comment="name: \"Listener\", typeName: \"std::optional<enum SharedTypes::v1_21_80::CameraPreset::AudioListener>\", id: 57, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
66 [label="std::optional<enum SharedTypes::v1_21_80::CameraPreset::AudioListener>",comment="name: \"std::optional<enum SharedTypes::v1_21_80::CameraPreset::AudioListener>\", typeName: \"\", id: 66, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
67 [label="Player Effects",comment="name: \"Player Effects\", typeName: \"std::optional<bool>\", id: 67, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
68 [label="std::optional<bool>",comment="name: \"std::optional<bool>\", typeName: \"\", id: 68, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
69 [label="Align target and camera forward",comment="name: \"Align target and camera forward\", typeName: \"std::optional<bool>\", id: 69, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
70 [label="std::optional<bool>",comment="name: \"std::optional<bool>\", typeName: \"\", id: 70, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
71 [label="Aim Assist",comment="name: \"Aim Assist\", typeName: \"std::optional<struct SharedTypes::v1_21_50::CameraPresetAimAssistDefinition>\", id: 71, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
94 [label="std::optional<struct SharedTypes::v1_21_50::CameraPresetAimAssistDefinition>",comment="name: \"std::optional<struct SharedTypes::v1_21_50::CameraPresetAimAssistDefinition>\", typeName: \"\", id: 94, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
95 [label="Control Scheme",comment="name: \"Control Scheme\", typeName: \"std::optional<enum ControlScheme::Scheme>\", id: 95, branchId: 0, recurseId: -1, attributes: 256, notes: \"\""];
99 [label="std::optional<enum ControlScheme::Scheme>",comment="name: \"std::optional<enum ControlScheme::Scheme>\", typeName: \"\", id: 99, branchId: 0, recurseId: -1, attributes: 512, notes: \"\""];
{ rank = max;10;12;17;19;21;23;25;27;32;37;39;41;43;45;50;52;54;56;66;68;70;94;99}

}
